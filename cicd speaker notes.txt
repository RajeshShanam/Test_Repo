
### **Slide 1: Title Slide**
**Title**: *Salesforce GitHub Actions Delta Deployment Pipeline*


"Hi everyone, Today, we’ll be discussing how we implemented a GitHub Actions Delta Deployment Pipeline for Salesforce applications. This presentation will showcase on how to automate Salesforce deployments using GitHub Actions, we are mainly focusing on delta deployment(like Specific changes), running only selective tests while validation, and automating notifications like success and failure of the jobs. We’ll go through the implementation step-by-step and then after will see the live demo like committing the code and deploying changes into target org by using this cicd pipeline.
---

Slide 2: here is the agenda of this presentation. we will walk through all these steps one by one. 
---

### **Slide 3:
first will start with salesforce devops, salesforce devops role is like setting up a streamline process to collaborate between development teams and operations teams to streamlime a software delivery.
it is a unique multi tenant architecture. it enhances collaboration between admins,  developers and testing teams and also automating the deployment of metadata and custom code. the goal of the salesforce devops is to Continuous integration and continuous deployment and improve release management and code quality.

---
slide 4: this is the overview of the github actions:
as we all know GitHub Actions is a powerful CI/CD tool that helps automate the pipelines, it integrate well with Salesforce projects. it works based on workflows, triggers and actions like mentioned here in this slide. In Salesforce, managing multiple environments (like sandboxes, production, etc.) can get complicated to keep code in sync on accross application environments.this actions simplifies the deployment and testing process, allowing teams to work faster with less errors.

---

### **Slide 5: this is the breakdown of the workflow..
workflow will define in YAML configuration in .github folder in root directory of the project. this workflow triggers on events like whenever we do pull request or code commit.

next will see the steps in the job. high level would be like check out the code, install required artifacts, authenticate to sf org and validate or deploy with specified test level in yaml file and then send notification.

---

### **Slide 6: this is our yaml file overview like what we are doing in our project. I will explain these steps in live demo later.

---

### **Slide 7: this is the screenshot of the successfull code validation in the actions pipeline.

---

### **Slide 8: some of the best practices included sf devops
 like using github secrets for sensitive data and create workflow for each environment and automate code quality checks, breakdown large workflows into smaller and use of alerts like notifiactions


---

### **Slide 9 and 10: we will see the live demo now with logs in each step. and this is the steps in the workflow.


---

### **Slide 10: here is the conclusion part and references which we followed while implementing this actions pipelines.

-----------------------------------------------------------------------------------------------------------------------------------------------

now will see the live demo, 

this is the .github folder in root directory and here is the workflow file. 

we are giving name as unique like PR to develop and validate in QA

this workflow starts with a **Pull Request (PR) trigger**, which will initiate the pipeline when a developer opens PR or updates a PR in GitHub. specifically looks for the changes in the `force-app` folder.

specifying the branch here where there is open on pull request

next below steps will execute like the code is **checked out** from the latest commit in the PR.This will ensures that we are working with the most up-to-date code.

Next, we install **Node.js** (version 18) and set up the **npm registry**. This is important because Salesforce development relies on node modules and package management to handle various tools and scripts."

Next, will install the all the dependencies like salesforce cli, sdfx scanner and installing java, sfdx delta plugin.

then will authenticate to salesforce org by using the connected app using jwt authentication.

in typical saleforce deployments will deploy the entire codebase, which will take more time and slow down the processes like in pathway. hovever with delta deployment we only deploy changes which are added or modified metadata with specified test classes mentioned in PR body. we have created the PR template to follow all the develors and mentioned test classes in delta package in the given syntax in PR body.

then create **delta packages**, followed by running test classes based on the PR content (NotestRun or testclasses with comma separated), scanning the code for best practices, and then, sending out notifications on the success or failure of the deployment. 



